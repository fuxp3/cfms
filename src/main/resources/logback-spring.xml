<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志的根目录 -->
    <property name="logHome" value="./logs"/>

    <!-- 定义日志文件名称 -->
    <property name="appName" value="foot"></property>

    <!-- 日志文件最大保存天数 -->
    <property name="maxHistory" value="10"/>

    <!-- IDEA 中打印彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!-- 1. 本地开发环境，控制台输出 -->
    <springProfile name="dev">
        <!--日志输出到控制台-->
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>
                    ${CONSOLE_LOG_PATTERN:-%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(---){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}
                </pattern>
                <charset>UTF-8</charset>
            </encoder>
        </appender>

        <!-- 配置第三方包的日志输出级别，避免调试时刷屏 -->
        <logger name="org.apache." level="WARN" />
        <logger name="org.springframework" level="WARN"/>
        <logger name="org.mybatis" level="WARN"/>
        <logger name="com.ibatis" level="DEBUG"/>

        <!-- 日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="STDOUT"/>
        </root>
    </springProfile>

    <!-- 2. 测试环境，输出到文件 -->
    <springProfile name="test">
        <!--日志输出到文件-->
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 指定"当前"日志文件的名称 -->
            <file>${logHome}/${appName}.log</file>

            <!-- 每天产生一个日志文件，达到maxHistory时，自动滚动 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logHome}/${appName}-%d{yyyy-MM-dd}.log</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
            </rollingPolicy>

            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}-[%-5level][%logger{20}] - %msg%n</pattern>
                <charset>UTF-8</charset>
            </encoder>
        </appender>

        <!-- 日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="FILE"/>
        </root>
    </springProfile>

    <!-- 3. 预生产环境，输出到文件 -->
    <springProfile name="prep">
        <!--日志输出到文件-->
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 指定"当前"日志文件的名称 -->
            <file>${logHome}/${appName}.log</file>

            <!-- 每天产生一个日志文件，达到maxHistory时，自动滚动 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logHome}/${appName}-%d{yyyy-MM-dd}.log</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
            </rollingPolicy>

            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}-[%-5level][%logger{20}] - %msg%n</pattern>
                <charset>UTF-8</charset>
            </encoder>
        </appender>

        <!-- 日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="FILE"/>
        </root>
    </springProfile>

    <!-- 4. 生产环境，输出到文件 -->
    <springProfile name="prod">
        <!--日志输出到文件-->
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 指定"当前"日志文件的名称 -->
            <file>${logHome}/${appName}.log</file>

            <!-- 每天产生一个日志文件，达到maxHistory时，自动滚动 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${logHome}/${appName}-%d{yyyy-MM-dd}.log</fileNamePattern>
                <maxHistory>${maxHistory}</maxHistory>
            </rollingPolicy>

            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}-[%-5level][%logger{20}] - %msg%n</pattern>
                <charset>UTF-8</charset>
            </encoder>
        </appender>

        <!-- 日志输出级别 -->
        <root level="ERROR">
            <appender-ref ref="FILE"/>
        </root>
    </springProfile>
</configuration>